#include "Helpers.h"
#include <stdint.h>

using namespace AES;

AESMode::AESMode(int Nk, int Nr) : Nk(Nk), Nr(Nr){};
AESMode::AESMode() : Nk(4), Nr(10){};

AESMode &AESMode::operator=(const AESMode &mode)
{
    Nk = mode.Nk;
    Nr = mode.Nr;
    return *this;
}

const AESMode CommonVariables::AES128 = AESMode(4, 10);
const AESMode CommonVariables::AES192 = AESMode(6, 12);
const AESMode CommonVariables::AES256 = AESMode(8, 14);

const cbyte CommonVariables::S_BOX[256] =
    {
        0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16};

const cbyte CommonVariables::Inv_S_BOX[256] =
    {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};

const cbyte CommonVariables::column_matrix[4][4] =
    {
        {0x02, 0x03, 0x01, 0x01},
        {0x01, 0x02, 0x03, 0x01},
        {0x01, 0x01, 0x02, 0x03},
        {0x03, 0x01, 0x01, 0x02}};

const cbyte CommonVariables::Inv_column_matrix[4][4] =
    {
        {0x0e, 0x0b, 0x0d, 0x09},
        {0x09, 0x0e, 0x0b, 0x0d},
        {0x0d, 0x09, 0x0e, 0x0b},
        {0x0b, 0x0d, 0x09, 0x0e}};

const cbyte CommonVariables::RCON[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

void AES::copyToState(cbyte input[16], cbyte state[4][4])
{
    state[0][0] = input[0];
    state[1][0] = input[1];
    state[2][0] = input[2];
    state[3][0] = input[3];

    state[0][1] = input[4];
    state[1][1] = input[5];
    state[2][1] = input[6];
    state[3][1] = input[7];

    state[0][2] = input[8];
    state[1][2] = input[9];
    state[2][2] = input[10];
    state[3][2] = input[11];

    state[0][3] = input[12];
    state[1][3] = input[13];
    state[2][3] = input[14];
    state[3][3] = input[15];
}

void AES::copyFromState(cbyte output[16], cbyte state[4][4])
{
    output[0] = state[0][0];
    output[1] = state[1][0];
    output[2] = state[2][0];
    output[3] = state[3][0];

    output[4] = state[0][1];
    output[5] = state[1][1];
    output[6] = state[2][1];
    output[7] = state[3][1];

    output[8] = state[0][2];
    output[9] = state[1][2];
    output[10] = state[2][2];
    output[11] = state[3][2];

    output[12] = state[0][3];
    output[13] = state[1][3];
    output[14] = state[2][3];
    output[15] = state[3][3];
}



#ifdef _WIN32
#include <memoryapi.h>
int AES::lockMemory(void* ptr, int size)
{
    return VirtualLock(ptr, size);
}

int AES::unlockMemory(void* ptr, int size)
{
    return VirtualUnlock(ptr, size);
}
#else
#include <sys/mman.h>
int AES::lockMemory(void* ptr, int size)
{
    return !-(mlock(ptr, size));
}

int AES::unlockMemory(void* ptr, int size)
{
    return !-(munlock(ptr, size));
}
#endif

void AES::copyMem(cbyte* dest, cbyte* src, int size)
{
    // for (int i = 0; i<size; i++)
    // {
    //     dest[i] = src[i];
    // }
    memcpy(dest, src, size);
}


void AES::xorArrays(cbyte* a, cbyte* b, cbyte* output, int size)
{

    for(int i = 0; i<size; i++)
    {
        output[i] = a[i] ^ b[i];
    }
}

cbyte AES::sBoxLookup(int i)
{
    return AES::CommonVariables::S_BOX[i];
}


cbyte AES::sBoxInterpolation(int i)
{
    return 0x63*(i==0)+ 0x7C*(i==1)+ 0x77*(i==2)+ 0x7B*(i==3)+ 0xF2*(i==4)+ 0x6B*(i==5)+ 0x6F*(i==6)+ 0xC5*(i==7)+ 0x30*(i==8)+ 0x01*(i==9)+ 0x67*(i==10)+ 0x2B*(i==11)+ 0xFE*(i==12)+ 0xD7*(i==13)+ 0xAB*(i==14)+ 0x76*(i==15)+ 
    0xCA*(i==16)+ 0x82*(i==17)+ 0xC9*(i==18)+ 0x7D*(i==19)+ 0xFA*(i==20)+ 0x59*(i==21)+ 0x47*(i==22)+ 0xF0*(i==23)+ 0xAD*(i==24)+ 0xD4*(i==25)+ 0xA2*(i==26)+ 0xAF*(i==27)+ 0x9C*(i==28)+ 0xA4*(i==29)+ 0x72*(i==30)+ 
    0xC0*(i==31)+0xB7*(i==32)+ 0xFD*(i==33)+ 0x93*(i==34)+ 0x26*(i==35)+ 0x36*(i==36)+ 0x3F*(i==37)+ 0xF7*(i==38)+ 0xCC*(i==39)+ 0x34*(i==40)+ 0xA5*(i==41)+ 0xE5*(i==42)+ 0xF1*(i==43)+ 0x71*(i==44)+ 0xD8*(i==45)+ 
    0x31*(i==46)+ 0x15*(i==47)+0x04*(i==48)+ 0xC7*(i==49)+ 0x23*(i==50)+ 0xC3*(i==51)+ 0x18*(i==52)+ 0x96*(i==53)+ 0x05*(i==54)+ 0x9A*(i==55)+ 0x07*(i==56)+ 0x12*(i==57)+ 0x80*(i==58)+ 0xE2*(i==59)+ 0xEB*(i==60)+ 
    0x27*(i==61)+ 0xB2*(i==62)+ 0x75*(i==63)+0x09*(i==64)+ 0x83*(i==65)+ 0x2C*(i==66)+ 0x1A*(i==67)+ 0x1B*(i==68)+ 0x6E*(i==69)+ 0x5A*(i==70)+ 0xA0*(i==71)+ 0x52*(i==72)+ 0x3B*(i==73)+ 0xD6*(i==74)+ 0xB3*(i==75)+ 
    0x29*(i==76)+ 0xE3*(i==77)+ 0x2F*(i==78)+ 0x84*(i==79)+0x53*(i==80)+ 0xD1*(i==81)+ 0x00*(i==82)+ 0xED*(i==83)+ 0x20*(i==84)+ 0xFC*(i==85)+ 0xB1*(i==86)+ 0x5B*(i==87)+ 0x6A*(i==88)+ 0xCB*(i==89)+ 0xBE*(i==90)+ 
    0x39*(i==91)+ 0x4A*(i==92)+ 0x4C*(i==93)+ 0x58*(i==94)+ 0xCF*(i==95)+0xD0*(i==96)+ 0xEF*(i==97)+ 0xAA*(i==98)+ 0xFB*(i==99)+ 0x43*(i==100)+ 0x4D*(i==101)+ 0x33*(i==102)+ 0x85*(i==103)+ 0x45*(i==104)+ 0xF9*(i==105)+ 
    0x02*(i==106)+ 0x7F*(i==107)+ 0x50*(i==108)+ 0x3C*(i==109)+ 0x9F*(i==110)+ 0xA8*(i==111)+0x51*(i==112)+ 0xA3*(i==113)+ 0x40*(i==114)+ 0x8F*(i==115)+ 0x92*(i==116)+ 0x9D*(i==117)+ 0x38*(i==118)+ 0xF5*(i==119)+ 0xBC*(i==120)+ 
    0xB6*(i==121)+ 0xDA*(i==122)+ 0x21*(i==123)+ 0x10*(i==124)+ 0xFF*(i==125)+ 0xF3*(i==126)+ 0xD2*(i==127)+ 0xCD*(i==128)+ 0x0C*(i==129)+ 0x13*(i==130)+ 0xEC*(i==131)+ 0x5F*(i==132)+ 0x97*(i==133)+ 0x44*(i==134)+ 0x17*(i==135)+ 
    0xC4*(i==136)+ 0xA7*(i==137)+ 0x7E*(i==138)+ 0x3D*(i==139)+ 0x64*(i==140)+ 0x5D*(i==141)+ 0x19*(i==142)+ 0x73*(i==143)+0x60*(i==144)+ 0x81*(i==145)+ 0x4F*(i==146)+ 0xDC*(i==147)+ 0x22*(i==148)+ 0x2A*(i==149)+ 0x90*(i==150)+ 
    0x88*(i==151)+ 0x46*(i==152)+ 0xEE*(i==153)+ 0xB8*(i==154)+ 0x14*(i==155)+ 0xDE*(i==156)+ 0x5E*(i==157)+ 0x0B*(i==158)+ 0xDB*(i==159)+0xE0*(i==160)+ 0x32*(i==161)+ 0x3A*(i==162)+ 0x0A*(i==163)+ 0x49*(i==164)+ 0x06*(i==165)+ 
    0x24*(i==166)+ 0x5C*(i==167)+ 0xC2*(i==168)+ 0xD3*(i==169)+ 0xAC*(i==170)+ 0x62*(i==171)+ 0x91*(i==172)+ 0x95*(i==173)+ 0xE4*(i==174)+ 0x79*(i==175)+0xE7*(i==176)+ 0xC8*(i==177)+ 0x37*(i==178)+ 0x6D*(i==179)+ 0x8D*(i==180)+ 
    0xD5*(i==181)+ 0x4E*(i==182)+ 0xA9*(i==183)+ 0x6C*(i==184)+ 0x56*(i==185)+ 0xF4*(i==186)+ 0xEA*(i==187)+ 0x65*(i==188)+ 0x7A*(i==189)+ 0xAE*(i==190)+ 0x08*(i==191)+0xBA*(i==192)+ 0x78*(i==193)+ 0x25*(i==194)+ 0x2E*(i==195)+ 
    0x1C*(i==196)+ 0xA6*(i==197)+ 0xB4*(i==198)+ 0xC6*(i==199)+ 0xE8*(i==200)+ 0xDD*(i==201)+ 0x74*(i==202)+ 0x1F*(i==203)+ 0x4B*(i==204)+ 0xBD*(i==205)+ 0x8B*(i==206)+ 0x8A*(i==207)+0x70*(i==208)+ 0x3E*(i==209)+ 0xB5*(i==210)+ 
    0x66*(i==211)+ 0x48*(i==212)+ 0x03*(i==213)+ 0xF6*(i==214)+ 0x0E*(i==215)+ 0x61*(i==216)+ 0x35*(i==217)+ 0x57*(i==218)+ 0xB9*(i==219)+ 0x86*(i==220)+ 0xC1*(i==221)+ 0x1D*(i==222)+ 0x9E*(i==223)+0xE1*(i==224)+ 0xF8*(i==225)+ 
    0x98*(i==226)+ 0x11*(i==227)+ 0x69*(i==228)+ 0xD9*(i==229)+ 0x8E*(i==230)+ 0x94*(i==231)+ 0x9B*(i==232)+ 0x1E*(i==233)+ 0x87*(i==234)+ 0xE9*(i==235)+ 0xCE*(i==236)+ 0x55*(i==237)+ 0x28*(i==238)+ 0xDF*(i==239)+0x8C*(i==240)+ 
    0xA1*(i==241)+ 0x89*(i==242)+ 0x0D*(i==243)+ 0xBF*(i==244)+ 0xE6*(i==245)+ 0x42*(i==246)+ 0x68*(i==247)+ 0x41*(i==248)+ 0x99*(i==249)+ 0x2D*(i==250)+ 0x0F*(i==251)+ 0xB0*(i==252)+ 0x54*(i==253)+ 0xBB*(i==254)+ 0x16*(i==255);
}


cbyte AES::sBoxInvInterpolation(int i)
{
    return 0x52*(i==0)+ 0x09*(i==1)+ 0x6a*(i==2)+ 0xd5*(i==3)+ 0x30*(i==4)+ 0x36*(i==5)+ 0xa5*(i==6)+ 0x38*(i==7)+ 0xbf*(i==8)+ 0x40*(i==9)+ 0xa3*(i==10)+ 0x9e*(i==11)+ 0x81*(i==12)+ 0xf3*(i==13)+ 0xd7*(i==14)+ 0xfb*(i==15)+
    0x7c*(i==16)+ 0xe3*(i==17)+ 0x39*(i==18)+ 0x82*(i==19)+ 0x9b*(i==20)+ 0x2f*(i==21)+ 0xff*(i==22)+ 0x87*(i==23)+ 0x34*(i==24)+ 0x8e*(i==25)+ 0x43*(i==26)+ 0x44*(i==27)+ 0xc4*(i==28)+ 0xde*(i==29)+ 0xe9*(i==30)+ 
    0xcb*(i==31)+0x54*(i==32)+ 0x7b*(i==33)+ 0x94*(i==34)+ 0x32*(i==35)+ 0xa6*(i==36)+ 0xc2*(i==37)+ 0x23*(i==38)+ 0x3d*(i==39)+ 0xee*(i==40)+ 0x4c*(i==41)+ 0x95*(i==42)+ 0x0b*(i==43)+ 0x42*(i==44)+ 0xfa*(i==45)+ 
    0xc3*(i==46)+ 0x4e*(i==47)+0x08*(i==48)+ 0x2e*(i==49)+ 0xa1*(i==50)+ 0x66*(i==51)+ 0x28*(i==52)+ 0xd9*(i==53)+ 0x24*(i==54)+ 0xb2*(i==55)+ 0x76*(i==56)+ 0x5b*(i==57)+ 0xa2*(i==58)+ 0x49*(i==59)+ 0x6d*(i==60)+ 
    0x8b*(i==61)+ 0xd1*(i==62)+ 0x25*(i==63)+0x72*(i==64)+ 0xf8*(i==65)+ 0xf6*(i==66)+ 0x64*(i==67)+ 0x86*(i==68)+ 0x68*(i==69)+ 0x98*(i==70)+ 0x16*(i==71)+ 0xd4*(i==72)+ 0xa4*(i==73)+ 0x5c*(i==74)+ 0xcc*(i==75)+ 
    0x5d*(i==76)+ 0x65*(i==77)+ 0xb6*(i==78)+ 0x92*(i==79)+0x6c*(i==80)+ 0x70*(i==81)+ 0x48*(i==82)+ 0x50*(i==83)+ 0xfd*(i==84)+ 0xed*(i==85)+ 0xb9*(i==86)+ 0xda*(i==87)+ 0x5e*(i==88)+ 0x15*(i==89)+ 0x46*(i==90)+ 
    0x57*(i==91)+ 0xa7*(i==92)+ 0x8d*(i==93)+ 0x9d*(i==94)+ 0x84*(i==95)+0x90*(i==96)+ 0xd8*(i==97)+ 0xab*(i==98)+ 0x00*(i==99)+ 0x8c*(i==100)+ 0xbc*(i==101)+ 0xd3*(i==102)+ 0x0a*(i==103)+ 0xf7*(i==104)+ 0xe4*(i==105)+ 
    0x58*(i==106)+ 0x05*(i==107)+ 0xb8*(i==108)+ 0xb3*(i==109)+ 0x45*(i==110)+ 0x06*(i==111)+0xd0*(i==112)+ 0x2c*(i==113)+ 0x1e*(i==114)+ 0x8f*(i==115)+ 0xca*(i==116)+ 0x3f*(i==117)+ 0x0f*(i==118)+ 0x02*(i==119)+ 0xc1*(i==120)+ 
    0xaf*(i==121)+ 0xbd*(i==122)+ 0x03*(i==123)+ 0x01*(i==124)+ 0x13*(i==125)+ 0x8a*(i==126)+ 0x6b*(i==127)+0x3a*(i==128)+ 0x91*(i==129)+ 0x11*(i==130)+ 0x41*(i==131)+ 0x4f*(i==132)+ 0x67*(i==133)+ 0xdc*(i==134)+ 0xea*(i==135)+ 
    0x97*(i==136)+ 0xf2*(i==137)+ 0xcf*(i==138)+ 0xce*(i==139)+ 0xf0*(i==140)+ 0xb4*(i==141)+ 0xe6*(i==142)+ 0x73*(i==143)+0x96*(i==144)+ 0xac*(i==145)+ 0x74*(i==146)+ 0x22*(i==147)+ 0xe7*(i==148)+ 0xad*(i==149)+ 0x35*(i==150)+ 
    0x85*(i==151)+ 0xe2*(i==152)+ 0xf9*(i==153)+ 0x37*(i==154)+ 0xe8*(i==155)+ 0x1c*(i==156)+ 0x75*(i==157)+ 0xdf*(i==158)+ 0x6e*(i==159)+0x47*(i==160)+ 0xf1*(i==161)+ 0x1a*(i==162)+ 0x71*(i==163)+ 0x1d*(i==164)+ 0x29*(i==165)+ 
    0xc5*(i==166)+ 0x89*(i==167)+ 0x6f*(i==168)+ 0xb7*(i==169)+ 0x62*(i==170)+ 0x0e*(i==171)+ 0xaa*(i==172)+ 0x18*(i==173)+ 0xbe*(i==174)+ 0x1b*(i==175)+0xfc*(i==176)+ 0x56*(i==177)+ 0x3e*(i==178)+ 0x4b*(i==179)+ 0xc6*(i==180)+ 
    0xd2*(i==181)+ 0x79*(i==182)+ 0x20*(i==183)+ 0x9a*(i==184)+ 0xdb*(i==185)+ 0xc0*(i==186)+ 0xfe*(i==187)+ 0x78*(i==188)+ 0xcd*(i==189)+ 0x5a*(i==190)+ 0xf4*(i==191)+0x1f*(i==192)+ 0xdd*(i==193)+ 0xa8*(i==194)+ 0x33*(i==195)+ 
    0x88*(i==196)+ 0x07*(i==197)+ 0xc7*(i==198)+ 0x31*(i==199)+ 0xb1*(i==200)+ 0x12*(i==201)+ 0x10*(i==202)+ 0x59*(i==203)+ 0x27*(i==204)+ 0x80*(i==205)+ 0xec*(i==206)+ 0x5f*(i==207)+0x60*(i==208)+ 0x51*(i==209)+ 0x7f*(i==210)+ 
    0xa9*(i==211)+ 0x19*(i==212)+ 0xb5*(i==213)+ 0x4a*(i==214)+ 0x0d*(i==215)+ 0x2d*(i==216)+ 0xe5*(i==217)+ 0x7a*(i==218)+ 0x9f*(i==219)+ 0x93*(i==220)+ 0xc9*(i==221)+ 0x9c*(i==222)+ 0xef*(i==223)+0xa0*(i==224)+ 0xe0*(i==225)+ 
    0x3b*(i==226)+ 0x4d*(i==227)+ 0xae*(i==228)+ 0x2a*(i==229)+ 0xf5*(i==230)+ 0xb0*(i==231)+ 0xc8*(i==232)+ 0xeb*(i==233)+ 0xbb*(i==234)+ 0x3c*(i==235)+ 0x83*(i==236)+ 0x53*(i==237)+ 0x99*(i==238)+ 0x61*(i==239)+0x17*(i==240)+ 
    0x2b*(i==241)+ 0x04*(i==242)+ 0x7e*(i==243)+ 0xba*(i==244)+ 0x77*(i==245)+ 0xd6*(i==246)+ 0x26*(i==247)+ 0xe1*(i==248)+ 0x69*(i==249)+ 0x14*(i==250)+ 0x63*(i==251)+ 0x55*(i==252)+ 0x21*(i==253)+ 0x0c*(i==254)+ 0x7d*(i==255);

}

